{"version":3,"file":"static/js/749.421353af.chunk.js","mappings":"sNACA,EAAwB,yBAAxB,EAAyD,yB,iDCQ5CA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAgBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5BC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,IAQxBC,GAASC,EAAAA,EAAAA,IAAO,CACpBC,OAAOC,EAAAA,EAAAA,MAASD,QAAQE,WACxBC,UAAUF,EAAAA,EAAAA,MAASG,IAAI,EAAG,gCAAgCF,aAG5D,OACE,gCACGN,GACCS,EAAAA,OAAAA,QACE,+DAEFZ,GAAiBa,EAAAA,QAAAA,UACnB,SAAC,KAAD,CACEC,cAAe,CAAEP,MAAO,GAAIG,SAAU,IACtCK,SApBe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BnB,GAASoB,EAAAA,EAAAA,IAAUF,IACnBC,IACAjB,GAAiBa,EAAAA,QAAAA,SAAiB,UACnC,EAiBKM,iBAAkBd,EAHpB,UAKE,UAAC,KAAD,YACE,mBAAOe,UAAWC,EAAlB,mBAEE,SAAC,KAAD,CAAcC,UAAU,MAAMC,KAAK,WACnC,SAAC,KAAD,CAAOC,KAAK,OAAOD,KAAK,QAAQH,UAAWC,QAE7C,mBAAOD,UAAWC,EAAlB,sBAEE,SAAC,KAAD,CAAcC,UAAU,MAAMC,KAAK,cACnC,SAAC,KAAD,CAAOC,KAAK,OAAOD,KAAK,WAAWH,UAAWC,QAEhD,mBAAQG,KAAK,SAAb,2BAKT,EChDD,EAJc,WACZ,OAAO,SAAC3B,EAAD,GACR,C","sources":["webpack://react-homework-template/./src/components/LogInForm/LogInForm.module.css?b51d","components/LogInForm/LogInForm.jsx","pages/Login/Login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"label\":\"LogInForm_label__NUlYv\",\"input\":\"LogInForm_input__MWW6w\"};","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { object, string } from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport css from './LogInForm.module.css';\nimport { logInUser } from 'redux/auth/authOperations';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport { getErrorUser, getIsLoadingUser } from 'redux/auth/authSelectors';\n\nexport const LogInForm = () => {\n  const dispatch = useDispatch();\n\n  const isUserLoading = useSelector(getIsLoadingUser);\n  const userError = useSelector(getErrorUser);\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(logInUser(values));\n    resetForm();\n    isUserLoading && Loading.standard('Loading');\n  };\n\n  const schema = object({\n    email: string().email().required(),\n    password: string().min(7, ' Too Short! Minimum 6 symbol').required(),\n  });\n\n  return (\n    <>\n      {userError &&\n        Notify.failure(\n          'Something went wrong please try to reload page or Register'\n        )}\n      {!isUserLoading && Loading.remove()}\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <Form>\n          <label className={css.label}>\n            Email\n            <ErrorMessage component=\"div\" name=\"email\" />\n            <Field type=\"mail\" name=\"email\" className={css.input}></Field>\n          </label>\n          <label className={css.label}>\n            Password\n            <ErrorMessage component=\"div\" name=\"password\" />\n            <Field type=\"text\" name=\"password\" className={css.input}></Field>\n          </label>\n          <button type=\"submit\">Log in</button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import { LogInForm } from 'components/LogInForm/LogInForm';\n\nconst Login = () => {\n  return <LogInForm />;\n};\n\nexport default Login;\n"],"names":["LogInForm","dispatch","useDispatch","isUserLoading","useSelector","getIsLoadingUser","userError","getErrorUser","schema","object","email","string","required","password","min","Notify","Loading","initialValues","onSubmit","values","resetForm","logInUser","validationSchema","className","css","component","name","type"],"sourceRoot":""}